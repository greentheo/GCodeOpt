shiny::runApp()
source('globals.r')
fileIn
source('globals.r')
source('globals.r')
source('globals.r')
source('globals.r')
source('globals.r')
source('globals.r')
source('globals.r')
shiny::runApp()
source('globals.r')
source('globals.r')
source('globals.r')
source('globals.r')
2532/4
4785/10
5666/12
9423/20
library(dplyr)
library(TSP)
library(ggplot2)
library(GCodeROpt)
library(readbitmap)
file = '~/BTSync/TheoPersonal/Photos/maliaAndAri.jpg'
xmax = 11
ymax = 11
pcnt = .1
threshold = 50/100
pic = read.bitmap(file)
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(x=sort(rep(1:ncol(picBW), nrow(picBW))),
y=rep(rev(1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
picDF = subset(picDF, bw<quantile(bw,threshold))
picDFSamp = picDF[sample(1:nrow(picDF), .1*nrow(picDF),prob = 1/(picDF$bw+.001)),]
distOpt = dist(picDFSamp[,c("x","y")])
install.package('EBImage')
install.packages('EBImage')
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
library(EBImage)
pic = imageData(flip(readImage(file)))
file = '~/BTSync/TheoPersonal/Photos/maliaAndAri.jpg'
xmax = 11
ymax = 11
pcnt = .1
threshold = 50/100
pic = imageData(flip(readImage(file)))
library(dplyr)
library(TSP)
library(ggplot2)
library(GCodeROpt)
library(readbitmap)
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(x=sort(rep(1:ncol(picBW), nrow(picBW))),
y=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
pic = imageData(f(readImage(file)))
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(x=sort(rep(1:ncol(picBW), nrow(picBW))),
y=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
pic = imageData((readImage(file)))
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(x=sort(rep(1:ncol(picBW), nrow(picBW))),
y=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
picDF = data.frame(y=sort(rep(1:ncol(picBW), nrow(picBW))),
x=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
pic = imageData(flip(readImage(file,)))
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(y=sort(rep(1:ncol(picBW), nrow(picBW))),
x=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
?readImage
xrsz = .5
yrsz = xrsz
img=readImage(file)
pic = imageData(flip(resize(img,w = xrsz*ncol(img), h = yrsz*nrow(img)))
)
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(y=sort(rep(1:ncol(picBW), nrow(picBW))),
x=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
picDF = subset(picDF, bw<quantile(bw,threshold))
picDFSamp = picDF[sample(1:nrow(picDF), .1*nrow(picDF),prob = 1/(picDF$bw+.001)),]
distOpt = dist(picDFSamp[,c("x","y")])
tsp = TSP(distOpt)
picDFSampOrd = data.frame(picDFSamp[ as.integer(solve_TSP(tsp,"nn")), ], sort=1:nrow(picDFSamp))
ggplot(picDFSampOrd, aes(x=x, y=y))+geom_path()
picDFSamp = picDF[sample(1:nrow(picDF), .3*nrow(picDF),prob = 1/(picDF$bw+.001)),]
distOpt = dist(picDFSamp[,c("x","y")])
tsp = TSP(distOpt)
picDFSampOrd = data.frame(picDFSamp[ as.integer(solve_TSP(tsp,"nn")), ], sort=1:nrow(picDFSamp))
ggplot(picDFSampOrd, aes(x=x, y=y))+geom_path()
library(bigmatrix)
library(bigmemory)
install.packages(c("bigmemory","bigmatrix"))
rm(list=ls())
gc(reset = T)
library(bigmemory)
library(bigmatrix)
file = '~/BTSync/TheoPersonal/Photos/maliaAndAri.jpg'
xrsz = .5
yrsz = xrsz
xmax = 11
ymax = 11
pcnt = .1
threshold = 50/100
img=readImage(file)
pic = imageData(flip(resize(img,w = xrsz*ncol(img), h = yrsz*nrow(img))))
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(y=sort(rep(1:ncol(picBW), nrow(picBW))),
x=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
picDF = subset(picDF, bw<quantile(bw,threshold))
picDFSamp = picDF[sample(1:nrow(picDF), .3*nrow(picDF),prob = 1/(picDF$bw+.001)),]
distOpt = dist(picDFSamp[,c("x","y")])
tsp = TSP(distOpt)
rm(tsp)
gc(reset=T)
file = '~/BTSync/TheoPersonal/Photos/maliaAndAriCropped.jpg'
xrsz = .5
yrsz = xrsz
xmax = 11
ymax = 11
pcnt = .1
threshold = 50/100
img=readImage(file)
pic = imageData(flip(resize(img,w = xrsz*ncol(img), h = yrsz*nrow(img))))
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(y=sort(rep(1:ncol(picBW), nrow(picBW))),
x=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
xmax = 11
ymax = 11
pcnt = .1
threshold = 50/100
img=readImage(file)
pic = imageData(flip(resize(img,w = xrsz*ncol(img), h = yrsz*nrow(img))))
picBW = .21*pic[,,1]+.72*pic[,,2] +.07*pic[,,3]
picDF = data.frame(y=sort(rep(1:ncol(picBW), nrow(picBW))),
x=rep((1:nrow(picBW)), ncol(picBW)),
bw=as.numeric(picBW))
ggplot(subset(picDF, bw<quantile(bw,threshold)), aes(x=x, y=y, fill=bw))+geom_raster()
ggplot(subset(picDF, bw<threshold, aes(x=x, y=y, fill=bw))+geom_raster()
ggplot(subset(picDF, bw<threshold), aes(x=x, y=y, fill=bw))+geom_raster()
picDF = subset(picDF, bw<quantile(bw,threshold))
picDFSamp = picDF[sample(1:nrow(picDF), .3*nrow(picDF),prob = 1/(picDF$bw+.001)),]
ggplot(picDFSamp, aes(x=x, y=y, fill=bw))+geom_raster()
picDFSamp = picDF[sample(1:nrow(picDF), .5*nrow(picDF),prob = 1/(picDF$bw+.001)),]
ggplot(picDFSamp, aes(x=x, y=y, fill=bw))+geom_raster()
picDFSamp = picDF[sample(1:nrow(picDF), .4*nrow(picDF),prob = 1/(picDF$bw+.001)),]
ggplot(picDFSamp, aes(x=x, y=y, fill=bw))+geom_raster()
picDFSamp = picDF[sample(1:nrow(picDF), .4*nrow(picDF),prob = 1/2/(picDF$bw+.001)),]
ggplot(picDFSamp, aes(x=x, y=y, fill=bw))+geom_raster()
clusts = kmeans(x = picDFSamp, centers = nrow(picDFSamp)/1000)
?dist
head(clusts)
picDFSamp[["clust"]] = clusts$cluster
ggplot(picDFSamp, aes(x=x, y=y, fill=clust))+geom_raster()
ggplot(picDFSamp, aes(x=x, y=y, fill=factor(clust)))+geom_raster()
i=1
distOpt = dist(subset(picDFSamp, clust=i)[,c("x","y")])
tsp = TSP(distOpt)
rm(distOpt)
rm(tsp)
install.packages('deoptim')
gc(reset = T)
install.packages('DEoptim')
table(clusts$cluster)
optFun = function(centers, picDFSamp){
clusts = kmeans(x = picDFSamp, centers = centers)
return(sum(table(clusts$cluster)>1000))
}
library(DEOptim)
library(DEoptim)
optFun = function(centerVec, picDFSamp){
centers = data.frame(x=centerVec[1:(length(centerVec)/2)],
y=centerVec[(length(centerVec)/2+1):length(centerVec)])
clusts = kmeans(x = picDFSamp[,c("x","y")], centers = centers)
return(sum(table(clusts$cluster)>1000))
}
ceil(nrow(picDFSamp)/1000)+1
ceiling(nrow(picDFSamp)/1000)+1
centerLow = rep(0,(ceiling(nrow(picDFSamp)/1000)+1)*2)
centerHigh = rep(max(picDFSamp),(ceiling(nrow(picDFSamp)/1000)+1)*2)
DEoptim(optFun, lower = centerLow, upper = centerHigh,picDFSamp=picDFSamp)
optFun = function(centerVec, picDFSamp){
centers = data.frame(x=centerVec[1:(length(centerVec)/2)],
y=centerVec[(length(centerVec)/2+1):length(centerVec)])
clusts = try(kmeans(x = picDFSamp[,c("x","y")], centers = centers))
if(class(clusts)="try-error"){
return(length(centerVec))
}else{
return(sum(table(clusts$cluster)>1000))
}
}
optFun = function(centerVec, picDFSamp){
centers = data.frame(x=centerVec[1:(length(centerVec)/2)],
y=centerVec[(length(centerVec)/2+1):length(centerVec)])
clusts = try(kmeans(x = picDFSamp[,c("x","y")], centers = centers))
if(class(clusts)="try-error"){
return(length(centerVec))
}else{
return(sum(table(clusts$cluster)>1000))
}
}
optFun = function(centerVec, picDFSamp){
centers = data.frame(x=centerVec[1:(length(centerVec)/2)],
y=centerVec[(length(centerVec)/2+1):length(centerVec)])
clusts = try(kmeans(x = picDFSamp[,c("x","y")], centers = centers))
if(class(clusts)=="try-error"){
return(length(centerVec))
}else{
return(sum(table(clusts$cluster)>1000))
}
}
DEoptim(optFun, lower = centerLow, upper = centerHigh,picDFSamp=picDFSamp)
